// file: RFBOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package es.upm.common03.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: RFBOntology.java
 * @author ontology bean generator
 * @version 2016/05/10, 17:47:14
 */
public class RFBOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "RFB";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new RFBOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String ROVERPOSITIONREPLY_ROVERPOSITION="RoverPosition";
    public static final String ROVERPOSITIONREPLY="RoverPositionReply";
    public static final String ROVERPOSITIONQUERY_ROVERAID="RoverAID";
    public static final String ROVERPOSITIONQUERY="RoverPositionQuery";
    public static final String PROTOCOL_GET_ROVER_POSITION="PROTOCOL_GET_ROVER_POSITION";
    public static final String PROTOCOL="PROTOCOL";
    public static final String PROTOCOL_UPDATE_ROVER_POSITION="PROTOCOL_UPDATE_ROVER_POSITION";
    public static final String LOCATION_X="X";
    public static final String LOCATION_Y="Y";
    public static final String LOCATION="Location";

  /**
   * Constructor
  */
  private RFBOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema locationSchema = new ConceptSchema(LOCATION);
    add(locationSchema, es.upm.common03.ontology.Location.class);
    ConceptSchema protocoL_updatE_roveR_positionSchema = new ConceptSchema(PROTOCOL_UPDATE_ROVER_POSITION);
    add(protocoL_updatE_roveR_positionSchema, es.upm.common03.ontology.PROTOCOL_UPDATE_ROVER_POSITION.class);
    ConceptSchema protocolSchema = new ConceptSchema(PROTOCOL);
    add(protocolSchema, es.upm.common03.ontology.PROTOCOL.class);
    ConceptSchema protocoL_geT_roveR_positionSchema = new ConceptSchema(PROTOCOL_GET_ROVER_POSITION);
    add(protocoL_geT_roveR_positionSchema, es.upm.common03.ontology.PROTOCOL_GET_ROVER_POSITION.class);

    // adding AgentAction(s)
    AgentActionSchema roverPositionQuerySchema = new AgentActionSchema(ROVERPOSITIONQUERY);
    add(roverPositionQuerySchema, es.upm.common03.ontology.RoverPositionQuery.class);
    AgentActionSchema roverPositionReplySchema = new AgentActionSchema(ROVERPOSITIONREPLY);
    add(roverPositionReplySchema, es.upm.common03.ontology.RoverPositionReply.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    locationSchema.add(LOCATION_Y, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    locationSchema.add(LOCATION_X, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    roverPositionQuerySchema.add(ROVERPOSITIONQUERY_ROVERAID, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    roverPositionReplySchema.add(ROVERPOSITIONREPLY_ROVERPOSITION, locationSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    protocoL_updatE_roveR_positionSchema.addSuperSchema(protocolSchema);
    protocoL_geT_roveR_positionSchema.addSuperSchema(protocolSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
